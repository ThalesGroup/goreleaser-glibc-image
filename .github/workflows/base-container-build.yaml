# Github Actions workflow
name: "Build a container that ship with goreleaser, cosign, ko-build, trivy, syft and push to GitHub Container Registry (GHCR)"

on:
    pull_request:
      branches:
        - main
        - release/*
    push:
      branches:
        - main
        - containerfiles # TODO: remove after testing
        - cosign-slsa # TODO: remove after testing

env:
    BASE_CONTAINERFILE_NAME: "${{ github.workspace }}/Containerfile.goreleaser-ko-cosign-trivy-syft-x86-arm64-root-usr.base"
    GOREL_ENTRYP_CONTAINERFILE_NAME: "${{ github.workspace }}/Containerfile.goreleaser-ko-cosign-trivy-syft-x86-arm64-root-usr"
    OCI_REGISTRY: "ghcr.io" # must be lowercase

# This workflow uses Podman and Buildah github actions to login, build and push container images:
#   * https://github.com/redhat-actions/podman-login
#   * https://github.com/redhat-actions/buildah-build
#   * https://github.com/redhat-actions/push-to-registry
jobs:
  # Some tools like the ghcr.io registry are case sensitive.
  # Since the "github.com/ThalesGroup" organisation has Uppercase letters, we need to convert the repository name to
  # lowercase so it matches "ghcr.io/thalesgroup".
  set-lowercase-repository:
    runs-on: ubuntu-latest
    outputs:
      lowercase-github-repository: ${{ steps.convert.outputs.lowercase }}
    steps:
      - name: Convert GitHub repository name to lowercase for OCI registry
        id: convert
        run: |
          echo "lowercase=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        shell: bash

  show-lowercase-repository:
    needs: set-lowercase-repository
    runs-on: ubuntu-latest
    steps:
      - name: Show lowercase GitHub repository name in logs
        run: |
          echo "Original Repository: ${{ github.repository }}"
          echo "Lowercase Repository: ${{ needs.set-lowercase-repository.outputs.lowercase-github-repository }}"

  # job to build a container image "goreleaser-glibc-image-base" has a /bin/bash entrypoint
  build-base-image:
    needs: set-lowercase-repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract Tools Versions from Containerfile as we use this in tags names
        id: extract
        run: |
          # Extract values from the Containerfile
          GOLANG_VERSION=$(grep -m1 'ARG GOLANG_VERSION=' $BASE_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "GOLANG_VERSION=${GOLANG_VERSION}" >> $GITHUB_OUTPUT

          GORELEASER_VERSION=$(grep -m1 'ARG GORELEASER_VERSION=' $BASE_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "GORELEASER_VERSION=${GORELEASER_VERSION}" >> $GITHUB_OUTPUT

          TRIVY_VERSION=$(grep -m1 'ARG TRIVY_VERSION=' $BASE_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "TRIVY_VERSION=${TRIVY_VERSION}" >> $GITHUB_OUTPUT

          COSIGN_VERSION=$(grep -m1 'ARG COSIGN_VERSION=' $BASE_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "COSIGN_VERSION=${COSIGN_VERSION}" >> $GITHUB_OUTPUT

          KO_VERSION=$(grep -m1 'ARG KO_VERSION=' $BASE_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "KO_VERSION=${KO_VERSION}" >> $GITHUB_OUTPUT

          SYFT_VERSION=$(grep -m1 'ARG SYFT_VERSION=' $BASE_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "SYFT_VERSION=${SYFT_VERSION}" >> $GITHUB_OUTPUT

          DEBIAN_VERSION=$(grep -m1 'ARG DEBIAN_VERSION=' $BASE_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "DEBIAN_VERSION=${DEBIAN_VERSION}" >> $GITHUB_OUTPUT

      - name: Prepare OCI tags list
        id: prepare-oci-tags
        run: |
          echo "export IMAGE_TAGS=\"\
          ${{ github.sha }} \
          golang-${{ steps.extract.outputs.golang_version }} \
          goreleaser-${{ steps.extract.outputs.goreleaser_version }} \
          cosign-${{ steps.extract.outputs.cosign_version }} \
          ko-${{ steps.extract.outputs.ko_version }} \
          trivy-${{ steps.extract.outputs.trivy_version }} \
          syft-${{ steps.extract.outputs.syft_version }} \
          golang-${{ steps.extract.outputs.golang_version }}-${{ steps.extract.outputs.debian_version}} \
          goreleaser-${{ steps.extract.outputs.goreleaser_version }}-${{ steps.extract.outputs.debian_version}} \
          cosign-${{ steps.extract.outputs.cosign_version }}-${{ steps.extract.outputs.debian_version}} \
          ko-${{ steps.extract.outputs.ko_version }}-${{ steps.extract.outputs.debian_version}} \
          trivy-${{ steps.extract.outputs.trivy_version }}-${{ steps.extract.outputs.debian_version}} \
          syft-${{ steps.extract.outputs.syft_version }}-${{ steps.extract.outputs.debian_version}}\"" >> $GITHUB_OUTPUT

      - name: Login to OCI registry
        uses: redhat-actions/podman-login@v1
        id: login
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set OCI container image URL to Github output
        id: set-oci-image-url
        run: echo "OCI_IMAGE_URL=${{ env.OCI_REGISTRY }}/${{ needs.set-lowercase-repository.outputs.lowercase-github-repository }}-base" >> $GITHUB_OUTPUT

      - name: Build the container image
        id: buildah-build
        uses: redhat-actions/buildah-build@v1
        with:
          image-name: ${{ steps.set-oci-image-url.outputs.oci_image_url }}
          containerfile: ${{ env.BASE_CONTAINERFILE_NAME }}
          tags: ${{ steps.prepare-oci-tags.outputs.image_tags }}

      - name: Push image
        uses: redhat-actions/push-to-registry@v1
        with:
          image-name: ${{ steps.set-oci-image-url.outputs.oci_image_url }}
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


    outputs:
      oci-image-digest: ${{ steps.buildah-build.outputs.image-digest }}
      oci-image-url: ${{ steps.set-oci-image-url.outputs.oci_image_url }} # needs to be lowercase

  # Job to build a SLSA provenance attestation
  base-image-provenance:
    name: Generate SLSA provenance attestation for OCI (base image entrypoint /bin/bash)
    needs: [build-base-image, set-lowercase-repository]  # Ensure this job runs after build-base-image
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing. Required for SLSA and Cosign
      packages: write # for uploading attestations. (https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#known-issues)
      # Must be referenced by a tag. https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#referencing-the-slsa-generator
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.build-base-image.outputs.oci-image-url }} # needs to be lowercase
      digest: ${{ needs.build-base-image.outputs.oci-image-digest }}
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Kaniko job to build a container image "goreleaser-glibc-image" that has a goreleaser entrypoint
  build-goreleaser-entryp-image:
    needs: [build-base-image, set-lowercase-repository]  # Ensure this job runs after build-base-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract Tools Versions from Containerfile as we use this in tags names
        id: extract
        run: |
          # Extract values from the Containerfile
          GOLANG_VERSION=$(grep -m1 'ARG GOLANG_VERSION=' $GOREL_ENTRYP_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "GOLANG_VERSION=${GOLANG_VERSION}" >> $GITHUB_OUTPUT

          GORELEASER_VERSION=$(grep -m1 'ARG GORELEASER_VERSION=' $GOREL_ENTRYP_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "GORELEASER_VERSION=${GORELEASER_VERSION}" >> $GITHUB_OUTPUT

          TRIVY_VERSION=$(grep -m1 'ARG TRIVY_VERSION=' $GOREL_ENTRYP_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "TRIVY_VERSION=${TRIVY_VERSION}" >> $GITHUB_OUTPUT

          COSIGN_VERSION=$(grep -m1 'ARG COSIGN_VERSION=' $GOREL_ENTRYP_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "COSIGN_VERSION=${COSIGN_VERSION}" >> $GITHUB_OUTPUT

          KO_VERSION=$(grep -m1 'ARG KO_VERSION=' $GOREL_ENTRYP_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "KO_VERSION=${KO_VERSION}" >> $GITHUB_OUTPUT

          SYFT_VERSION=$(grep -m1 'ARG SYFT_VERSION=' $GOREL_ENTRYP_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "SYFT_VERSION=${SYFT_VERSION}" >> $GITHUB_OUTPUT

          DEBIAN_VERSION=$(grep -m1 'ARG DEBIAN_VERSION=' $GOREL_ENTRYP_CONTAINERFILE_NAME | cut -d'=' -f2)
          echo "DEBIAN_VERSION=${DEBIAN_VERSION}" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v3
        id: login
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set OCI container image URL to Github output
        id: set-oci-image-url
        run: echo "OCI_IMAGE_URL=${{ env.OCI_REGISTRY }}/${{ needs.set-lowercase-repository.outputs.lowercase-github-repository }}" >> $GITHUB_OUTPUT

      - name: Container metadata and tags
        id: metadata
        uses: docker/metadata-action@v5
        with:
          # image name may contain lowercase letters, digits and separators https://github.com/docker/metadata-action/tree/v5/?tab=readme-ov-file#image-name-and-tag-sanitization
          images: ${{ steps.set-oci-image-url.outputs.oci_image_url }}
          tags: |
            type=ref,event=branch
            # use tools version as tags
            type=raw,value=golang-${{ steps.extract.outputs.golang_version }}
            type=raw,value=goreleaser-${{ steps.extract.outputs.goreleaser_version }}
            type=raw,value=cosign-${{ steps.extract.outputs.cosign_version }}
            type=raw,value=ko-${{ steps.extract.outputs.ko_version }}
            type=raw,value=trivy-${{ steps.extract.outputs.trivy_version }}
            type=raw,value=syft-${{ steps.extract.outputs.syft_version }}

            type=raw,value=golang-${{ steps.extract.outputs.golang_version }}-${{ steps.extract.outputs.debian_version}}
            type=raw,value=goreleaser-${{ steps.extract.outputs.goreleaser_version }}-${{ steps.extract.outputs.debian_version}}
            type=raw,value=cosign-${{ steps.extract.outputs.cosign_version }}-${{ steps.extract.outputs.debian_version}}
            type=raw,value=ko-${{ steps.extract.outputs.ko_version }}-${{ steps.extract.outputs.debian_version}}
            type=raw,value=trivy-${{ steps.extract.outputs.trivy_version }}-${{ steps.extract.outputs.debian_version}}
            type=raw,value=syft-${{ steps.extract.outputs.syft_version }}-${{ steps.extract.outputs.debian_version}}

            # minimal (short sha)
            type=sha
            # full length sha
            type=sha,format=long

      - name: Build the OCI image
        id: kaniko
        uses: int128/kaniko-action@v1
        with:
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache: true
          cache-repository: ${{ env.OCI_REGISTRY }}/${{ needs.set-lowercase-repository.outputs.lowercase-github-repository }}/cache
          file: ${{ env.GOREL_ENTRYP_CONTAINERFILE_NAME }}
          context: ${{ env.KANIKO_BUILD_CONTEXT }}
          verbosity: "info"  # https://github.com/GoogleContainerTools/kaniko#flag---verbosity

    outputs:
      oci-image-digest: ${{ steps.kaniko.outputs.digest }}
      oci-image-url: ${{ steps.set-oci-image-url.outputs.oci_image_url }} # needs to be lowercase

  goreleaser-entryp-image-provenance:
    name: Generate SLSA provenance attestation for OCI (entrypoint goreleaser)
    needs: [build-goreleaser-entryp-image]  # Ensure this job runs after build-base-image
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing. Required for SLSA and Cosign
      packages: write # for uploading attestations. (https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#known-issues)
      # Must be referenced by a tag. https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#referencing-the-slsa-generator
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.build-goreleaser-entryp-image.outputs.oci-image-url }} # needs to be lowercase
      digest: ${{ needs.build-goreleaser-entryp-image.outputs.oci-image-digest }}
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}
